name: eloquent pc

on:
  push:
    branches:
      - 'main'
      - 'dev'
    tags:
      - v*

  workflow_dispatch:

jobs:
  eloquent-pc:
    runs-on: ubuntu-latest
    env:
      DOCKER_REPO_1: ghcr.io/${{ github.repository_owner }}/core-eloquent-pc
      DOCKER_REPO_2: ghcr.io/${{ github.repository_owner }}/base-eloquent-pc
      DOCKER_REPO_3: ghcr.io/${{ github.repository_owner }}/runtime-eloquent-pc
      DOCKER_REPO_4: ghcr.io/${{ github.repository_owner }}/build-eloquent-pc
      DOCKER_REPO_5: ghcr.io/${{ github.repository_owner }}/devel-eloquent-pc
    steps:
    -
      name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GHCR_TOKEN }}
    - 
      name: Checkout
      uses: actions/checkout@v2
    -
      name: Get Tags
      id: tag
      run: |
        tag=$(git describe --exact-match --tags $(git log -n1 --pretty='%h')) || tag=latest
        export TAG=$tag
        echo ::set-output name=TAG::$TAG
    - 
      name: Build the core docker image
      run: |
        TAG=${{ steps.tag.outputs.TAG }}
        TAGS="--tag ${DOCKER_REPO_1}"
        if [ $TAG != latest ]; then
          TAGS="$TAGS --tag ${DOCKER_REPO_1}:${TAG}"
        fi
        docker build . --file core.dockerfile ${TAGS} --build-arg FROM_IMAGE=nvidia/cudagl:11.1-runtime-ubuntu18.04
    - 
      name: Build the base docker image
      run: |
        TAG=${{ steps.tag.outputs.TAG }}
        TAGS="--tag ${DOCKER_REPO_2}"
        if [ $TAG != latest ]; then
          TAGS="$TAGS --tag ${DOCKER_REPO_2}:${TAG}"
        fi
        docker build . --file base.eloquent.dockerfile ${TAGS} --build-arg FROM_IMAGE=$DOCKER_REPO_1
    - 
      name: Build the runtime docker image
      run: |
        TAG=${{ steps.tag.outputs.TAG }}
        TAGS="--tag ${DOCKER_REPO_3}"
        if [ $TAG != latest ]; then
          TAGS="$TAGS --tag ${DOCKER_REPO_3}:${TAG}"
        fi
        docker build . --file runtime.eloquent.dockerfile --tag tmp --build-arg FROM_IMAGE=$DOCKER_REPO_2
        docker build . --file runtime.dockerfile ${TAGS} --build-arg FROM_IMAGE=tmp
    - 
      name: Build the build docker image
      run: |
        TAG=${{ steps.tag.outputs.TAG }}
        TAGS="--tag ${DOCKER_REPO_4}"
        if [ $TAG != latest ]; then
          TAGS="$TAGS --tag ${DOCKER_REPO_4}:${TAG}"
        fi
        docker build . --file build.eloquent.dockerfile --tag tmp --build-arg FROM_IMAGE=$DOCKER_REPO_3
        docker build . --file build.dockerfile ${TAGS} --build-arg FROM_IMAGE=tmp
    - 
      name: Build the devel docker image
      run: |
        TAG=${{ steps.tag.outputs.TAG }}
        TAGS="--tag ${DOCKER_REPO_5}"
        if [ $TAG != latest ]; then
          TAGS="$TAGS --tag ${DOCKER_REPO_5}:${TAG}"
        fi
        docker build . --file devel.dockerfile ${TAGS} --build-arg FROM_IMAGE=$DOCKER_REPO_4
    -
      name: Push all images
      run: docker push -a